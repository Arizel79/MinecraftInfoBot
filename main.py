import logging

import telebot
from telebot import formatting
from models.config import TOKEN
from models.minecraft_server_info import get_mc_server_info, GetServerInfoError
from random import randint
import time

HELP_TEXT = formatting.hbold("Get Minecraft Servers Information Bot") + "\n\n" + \
            """–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–∞—Ö Minecraft
            
            –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
            /stats IP  –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ
            /help  —Å–ø—Ä–∞–≤–∫–∞"""


def get_printable_user(from_user):
    usr = from_user
    return f"{usr.first_name}{"" if not usr.last_name else f' {usr.last_name}'} ({f'@{usr.username}, ' if usr.username else ""}{usr.id})"


def get_printable_time():
    return time.strftime("%H:%M.%S %d.%m.%Y", time.localtime())


def write_msg(msg):
    with open("msgs.txt", "a+", encoding="utf-8") as f:
        text = f"[{get_printable_time()}] {msg}"
        f.write(text)
        print(text)


def on_msg(msg):
    write_msg(f"{get_printable_user(msg.from_user)}: {msg.text}")


write_msg("start")


def generate_server_description(address: str) -> str:
    """–û–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        data = get_mc_server_info(address)
        if data["ping"]:
            if len(data['players_list']) > 0:
                pl_list = f"\n‚Ä¢ –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤: {(', '.join(formatting.hcode(p['name']) for p in data['players_list']) if data['players_list'] else '-')}"
            else:
                pl_list = ""
            return f"""{formatting.hbold(f'–°–µ—Ä–≤–µ—Ä "{address}"')}

‚Ä¢ –ó–∞–ø—Ä–æ—Å: {formatting.hcode(address)}
‚Ä¢ –¶–∏—Ñ—Ä–æ–≤–æ–π IP: {formatting.hcode(data['address'])}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üü¢–û–Ω–ª–∞–π–Ω' if data['is_online'] else "‚ö´Ô∏è–û—Ñ—Ñ–ª–∞–π–Ω"}
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: 
{formatting.hpre('\n'.join(data['motd']), language="motd")}
‚Ä¢ –í–µ—Ä—Å–∏—è: {formatting.hcode(data['version'])}
‚Ä¢ –û–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–æ–≤: {data['players']} / {data['max_players']}{pl_list}
"""
        else:
            raise GetServerInfoError(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ "{address}"')
            # return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å IP –∞–¥—Ä–µ—Å–∞ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ"
    except KeyError as e:
        telebot.logger.error("Missing key in data: %s", str(e))
        return formatting.hbold("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")

    except ConnectionError:
        raise GetServerInfoError("–û—à–∏–±–æ—á–∫–∞ API—à–∫–∏ (;")


bot = telebot.TeleBot(TOKEN)


@bot.message_handler(commands=['start'])
def handle_start(message: telebot.types.Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    on_msg(message)
    bot.send_message(message.chat.id, "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! üöÄ")


@bot.message_handler(commands=['help'])
def handle_help(message: telebot.types.Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    on_msg(message)
    bot.send_message(message.chat.id, HELP_TEXT, parse_mode='html')


def send_data(message):
    """–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ"""
    try:
        args = message.text.split()
        if message.text[0] == "/":
            if len(args) < 2:
                raise ValueError

            ip = args[1]
        else:
            ip = args[0]

        response = generate_server_description(ip)
    except ValueError:
        error_msg = f"{formatting.hbold("–û—à–∏–±–∫–∞:")} –ù–µ —É–∫–∞–∑–∞–Ω IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞!\n–ü—Ä–∏–º–µ—Ä: /stats mc.example.com"
        bot.reply_to(message, error_msg, parse_mode='html')
    except GetServerInfoError as ex:
        error_msg = f"{formatting.hbold("–û—à–∏–±–∫–∞:")} {ex}"
        bot.reply_to(message, error_msg, parse_mode='html')
    except ConnectionError as e:
        bot.reply_to(message, formatting.hbold(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"), parse_mode='html')

    else:
        bot.send_message(message.chat.id, response, parse_mode='html', reply_to_message_id=message.id)


@bot.message_handler(commands=['stats', 'info'])
def handle_stats(message: telebot.types.Message) -> None:
    send_data(message)


@bot.message_handler(func=lambda message: True)
def handle_other_messages(message: telebot.types.Message) -> None:
    on_msg(message)
    if message.text.lower() in {'hello!', '–ø—Ä–∏–≤–µ—Ç'}:
        bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! üëã")
    else:
        handle_stats(message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∑–∞–ø—Ä–æ—Å–æ–≤
@bot.inline_handler(lambda query: True)
def query_text(inline_query):
    try:
        write_msg(f"{get_printable_user(inline_query.from_user)} inline: {inline_query.query}")
        query = inline_query.query.rstrip()

        if query == "":
            r1 = telebot.types.InlineQueryResultArticle(
                id=str(randint(0, 10000)),
                title=f"–í–≤–µ–¥–∏—Ç–µ IP Minecraft —Å–µ—Ä–≤–µ—Ä–∞",
                description="–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω—ë–º",
                input_message_content=telebot.types.InputTextMessageContent(
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n{'@GetMinecraftInfoBot SERVER-IP'}", parse_mode="html")
            )
            bot.answer_inline_query(inline_query.id, [r1])
            return
        ans = generate_server_description(inline_query.query)
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è inline-–æ—Ç–≤–µ—Ç–∞
        r1 = telebot.types.InlineQueryResultArticle(
            id=str(randint(0, 10000)),
            title=f"–°–µ—Ä–≤–µ—Ä {inline_query.query}",
            description="–ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞",
            input_message_content=telebot.types.InputTextMessageContent(ans, parse_mode="html")
        )
        bot.answer_inline_query(inline_query.id, [r1])

    except GetServerInfoError as ex:
        # print(f"INLINE EX: {ex}")
        r2 = telebot.types.InlineQueryResultArticle(
            id=str(randint(0, 10000)),
            title=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ",
            description=f"{ex}",
            input_message_content=telebot.types.InputTextMessageContent(f"{ex}", parse_mode="html")
        )
        bot.answer_inline_query(inline_query.id, [r2])
    except Exception as ex:
        print(f"EX: {ex}")


if __name__ == "__main__":
    try:
        bot.infinity_polling()
    except ConnectionError as ex:
        logging.error(f"ConnectionError: {ex}")
