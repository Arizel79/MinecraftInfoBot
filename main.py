import telebot
from telebot import formatting
from config import TOKEN
from minecraft_server_info import get_mc_server_info


HELP_TEXT = formatting.hbold("Get Minecraft Servers Information Bot") + "\n\n" + \
"""–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–∞—Ö Minecraft

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/stats IP  –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ
/help  —Å–ø—Ä–∞–≤–∫–∞"""


def generate_server_description(address: str) -> str:
    data = get_mc_server_info(address)
    """–û–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        if data["ping"]:
            if len(data['players_list']) > 0:
                pl_list = f"\n‚Ä¢ –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤: {(', '.join(formatting.hcode(p['name']) for p in data['players_list']) if data['players_list'] else '-')}"
            else:
                pl_list = ""
            return f"""{formatting.hbold(f'–°–µ—Ä–≤–µ—Ä "{address}"')}
‚Ä¢ Ping: {data["ping"]}
‚Ä¢ –ó–∞–ø—Ä–æ—Å: {formatting.hcode(address)}
‚Ä¢ –¶–∏—Ñ—Ä–æ–≤–æ–π IP: {formatting.hcode(data['address'])}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üü¢–û–Ω–ª–∞–π–Ω' if data['is_online'] else "‚ö´Ô∏è–û—Ñ—Ñ–ª–∞–π–Ω"}
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: 
{formatting.hpre('\n'.join(data['motd']), language="motd")}
‚Ä¢ –í–µ—Ä—Å–∏—è: {formatting.hcode(data['version'])}
‚Ä¢ –û–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–æ–≤: {data['players']} / {data['max_players']}{pl_list}
"""
        else:
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å IP –∞–¥—Ä–µ—Å–∞ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ"
    except KeyError as e:
        telebot.logger.error("Missing key in data: %s", str(e))
        return formatting.hbold("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")


bot = telebot.TeleBot(TOKEN)


@bot.message_handler(commands=['start'])
def handle_start(message: telebot.types.Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    bot.send_message(message.chat.id, "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! üöÄ")


@bot.message_handler(commands=['help'])
def handle_help(message: telebot.types.Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    bot.send_message(message.chat.id, HELP_TEXT, parse_mode='html')

def send_data(message):
    """–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ"""
    try:
        args = message.text.split()
        if message.text[0] == "/":
            if len(args) < 2:
                raise ValueError

            ip = args[1]
        else:
            ip = args[0]
        server_data = get_mc_server_info(ip)
        response = generate_server_description(ip)
    except ValueError:
        error_msg = formatting.hbold("–û—à–∏–±–∫–∞:") + "\n–ù–µ —É–∫–∞–∑–∞–Ω IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞!\n–ü—Ä–∏–º–µ—Ä: /stats mc.example.com"
        bot.reply_to(message, error_msg, parse_mode='html')
    except ConnectionError as e:
        bot.reply_to(message, formatting.hbold(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"), parse_mode='html')
    #except Exception as e:
    #    telebot.logger.error("Unexpected error: %s", str(e))
    #    bot.reply_to(message, formatting.hbold("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞"), parse_mode='html')
    else:
        bot.send_message(message.chat.id, response, parse_mode='html', reply_to_message_id=message.id)


@bot.message_handler(commands=['stats', 'info'])
def handle_stats(message: telebot.types.Message) -> None:
    send_data(message)

@bot.message_handler(func=lambda message: True)
def handle_other_messages(message: telebot.types.Message) -> None:
    if message.text.lower() in {'hello!', '–ø—Ä–∏–≤–µ—Ç'}:
        bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! üëã")
    else:
        handle_stats(message)

if __name__ == "__main__":
    bot.infinity_polling()
