import logging
import requests
import telebot
from telebot import formatting as frmt
frmt = frmt
from models.config import TOKEN
from models.minecraft_server_info import get_mc_server_info, GetServerInfoError
from random import randint
import time
from models.orm import MySession, User
from datetime import datetime

HELP_TEXT = frmt.hbold("Get Minecraft Servers Information Bot") + "\n\n" + \
            f"""–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–∞—Ö Minecraft
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –∞–¥—Ä–µ—Å (IP) —Å–µ—Ä–≤–µ—Ä–∞ –∏ —è –Ω–∞–ø–∏—à—É —Ç–µ–±–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω—ë–º (–æ–Ω–ª–∞–π–Ω, –æ–ø–∏—Å–∞–Ω–∏–µ, –∏ –ø—Ä–æ—á.)
            
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /stats ADDRESS - –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ —Å –∞–¥—Ä–µ—Å–æ–º ADDRESS
‚Ä¢ /help - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ /fav - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤:
    ‚Ä¢ /fav - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
    ‚Ä¢ {frmt.hcode("/fav add mc.example.com")} - –¥–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä —Å –∞–¥—Ä–µ—Å–æ–º {frmt.hcode("mc.example.com")} –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞ (–∏–º—è –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∞–¥—Ä–µ—Å–æ–º)
    ‚Ä¢ {frmt.hcode("/fav add mc.example.com best_server")} - –¥–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä —Å –∞–¥—Ä–µ—Å–æ–º {frmt.hcode("mc.example.com")} –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–¥ –∏–º–µ–Ω–µ–º best_server
    ‚Ä¢ {frmt.hcode("/fav del mc.example.com")} - —É–¥–∞–ª—è–µ—Ç —Å–µ—Ä–≤–µ—Ä —Å –∏–º–µ–Ω–µ–º {frmt.hcode("mc.example.com")} –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
def print_fav_servers(fav_servers: dict):
    out= ""

    for k, v in fav_servers.items():
        out += f"{k} - {v}\n"
    return out


def get_printable_user(from_user):
    usr = from_user
    return f"{usr.first_name}{"" if not usr.last_name else f' {usr.last_name}'} ({f'@{usr.username}, ' if usr.username else ""}{usr.id})"


def get_printable_time():
    return time.strftime("%H:%M.%S %d.%m.%Y", time.localtime())


def write_msg(msg):
    with open("msgs.txt", "a+", encoding="utf-8") as f:
        text = f"[{get_printable_time()}] {msg}"
        f.write(text)
        print(text)


def on_msg(msg):
    write_msg(f"{get_printable_user(msg.from_user)}: {msg.text}")


write_msg("start")


def generate_server_description(address: str) -> str:
    """–û–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        data = get_mc_server_info(address)
        if data["ping"]:
            if len(data['players_list']) > 0:
                pl_list = f"\n‚Ä¢ –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤: {(', '.join(frmt.hcode(p['name']) for p in data['players_list']) if data['players_list'] else '-')}"
            else:
                pl_list = ""
            return f"""{frmt.hbold(f'–°–µ—Ä–≤–µ—Ä "{address}"')}

‚Ä¢ –ó–∞–ø—Ä–æ—Å: {frmt.hcode(address)}
‚Ä¢ –¶–∏—Ñ—Ä–æ–≤–æ–π IP: {frmt.hcode(data['address'])}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üü¢–û–Ω–ª–∞–π–Ω' if data['is_online'] else "‚ö´Ô∏è–û—Ñ—Ñ–ª–∞–π–Ω"}
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: 
{frmt.hpre('\n'.join(data['motd']), language="motd")}
‚Ä¢ –í–µ—Ä—Å–∏—è: {frmt.hcode(data['version'])}
‚Ä¢ –û–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–æ–≤: {data['players']} / {data['max_players']}{pl_list}
"""
        else:
            raise GetServerInfoError(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ "{address}"')
            # return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å IP –∞–¥—Ä–µ—Å–∞ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ"
    except KeyError as e:
        telebot.logger.error("Missing key in data: %s", str(e))
        return frmt.hbold("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")

    except ConnectionError:
        raise GetServerInfoError("–û—à–∏–±–æ—á–∫–∞ API—à–∫–∏ (;")

class Bot():
    def __init__(self):
        self.bot = telebot.TeleBot(TOKEN)
        self.session = MySession()

    def mainloop(self):
        bot = self.bot
        @bot.message_handler(regexp=r"^(?!\/).+$")
        def handle_other_messages(message: telebot.types.Message ) -> None:
            new_user = User(id=message.from_user.id)
            self.session.add_user(new_user)
            on_msg(message)
            if message.text.lower() in {'hello!', '–ø—Ä–∏–≤–µ—Ç'}:
                bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! üëã")
            else:
                handle_stats(message)

        @bot.message_handler(commands=['start'])
        def handle_start(message: telebot.types.Message) -> None:
            """–ö–æ–º–∞–Ω–¥–∞ /start"""
            on_msg(message)
            bot.send_message(message.chat.id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!\n"
                                              f"\n"
                                              f"–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Minecraft —Å–µ—Ä–≤–µ—Ä–∞—Ö\n")

        @bot.message_handler(commands=['fav'])
        def handle_start(message: telebot.types.Message) -> None:
            """–ö–æ–º–∞–Ω–¥–∞ /fav"""
            on_msg(message)
            ls = message.text.split()
            if len(ls) == 1:
                fav_servers = self.session.get_fav_servers(message.from_user.id)
                bot.send_message(message.chat.id, f"–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞:\n{print_fav_servers(fav_servers)}")
            elif len(ls) == 3:
                if ls[1] in ["add", "a", "+"]:
                    fav_servers = self.session.get_fav_servers(message.from_user.id)
                    fav_servers[f"{ls[2]}"] = ls[2]
                    self.session.set_fav_servers(message.from_user.id, fav_servers)
                    bot.send_message(message.chat.id, f"–î–æ–±–∞–≤–∏–ª–∏ —Å–µ—Ä–≤–µ—Ä")
                elif ls[1] in ["del", "remove", "-"]:
                    fav_servers = self.session.get_fav_servers(message.from_user.id)
                    del fav_servers[ls[2]]
                    self.session.set_fav_servers(message.from_user.id, fav_servers)
                    bot.send_message(message.chat.id, f"–£–¥–∞–ª–∏–ª —Å–µ—Ä–≤–µ—Ä")
            elif len(ls) == 4:
                if ls[1] in ["add", "a", "+"]:
                    fav_servers = self.session.get_fav_servers(message.from_user.id)
                    fav_servers[f"{ls[2]}"] = ls[3]
                    self.session.set_fav_servers(message.from_user.id, fav_servers)
                    bot.send_message(message.chat.id, f"–î–æ–±–∞–≤–∏–ª–∏ —Å–µ—Ä–≤–µ—Ä \n–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞:\n{print_fav_servers(fav_servers)}\n")


            elif len(ls) == 4:
                fav_servers = self.session.get_fav_servers(message.from_user.id)
                fav_servers[f"{ls[2]}"] = ls[1]
                self.session.set_fav_servers(message.from_user.id, fav_servers)
                bot.send_message(message.chat.id, f"–î–æ–±–∞–≤–∏–ª–∏ —Å–µ—Ä–≤–µ—Ä\n–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞:\n{print_fav_servers(fav_servers)}\n")

        @bot.message_handler(commands=['help'])
        def handle_help(message: telebot.types.Message) -> None:
            """–ö–æ–º–∞–Ω–¥–∞ /help"""
            on_msg(message)
            bot.send_message(message.chat.id, HELP_TEXT, parse_mode='html')


        def send_data(message):
            """–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ"""
            try:
                args = message.text.split()
                if message.text[0] == "/":
                    if len(args) < 2:
                        raise ValueError

                    ip = args[1]
                else:
                    ip = args[0]

                response = generate_server_description(ip)
            except ValueError:
                error_msg = f"{frmt.hbold("–û—à–∏–±–∫–∞:")} –ù–µ —É–∫–∞–∑–∞–Ω IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞!\n–ü—Ä–∏–º–µ—Ä: /stats mc.example.com"
                bot.reply_to(message, error_msg, parse_mode='html')
            except GetServerInfoError as ex:
                error_msg = f"{frmt.hbold("–û—à–∏–±–∫–∞:")} {ex}"
                bot.reply_to(message, error_msg, parse_mode='html')
            except ConnectionError as e:
                bot.reply_to(message, frmt.hbold(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"), parse_mode='html')

            else:

                bot.send_message(message.chat.id, response, parse_mode='html', reply_to_message_id=message.id)
                self.session.add_request(message.from_user.id)

        @bot.message_handler(commands=['stats', 'info'])
        def handle_stats(message: telebot.types.Message) -> None:
            send_data(message)




        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∑–∞–ø—Ä–æ—Å–æ–≤
        @bot.inline_handler(lambda query: True)
        def query_text(inline_query):
            try:
                write_msg(f"{get_printable_user(inline_query.from_user)} inline: {inline_query.query}")
                query = inline_query.query.rstrip()

                if query == "":
                    r1 = telebot.types.InlineQueryResultArticle(
                        id=str(randint(0, 10000)),
                        title=f"–í–≤–µ–¥–∏—Ç–µ IP Minecraft —Å–µ—Ä–≤–µ—Ä–∞",
                        description="–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω—ë–º",
                        input_message_content=telebot.types.InputTextMessageContent(
                            f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Minecraft —Å–µ—Ä–≤–µ—Ä–µ –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É {bot.get_me().username} –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤ –ª—é–±–æ–º —á–∞—Ç–µ:\n`@{f'{bot.get_me().username} <MINECRAFT_SERVER_ADDRESS>`'}", parse_mode="markdownV2")
                    )
                    bot.answer_inline_query(inline_query.id, [r1])
                    return

                ans = generate_server_description(inline_query.query)
                self.session.add_request(inline_query.from_user.id)



                r1 = telebot.types.InlineQueryResultArticle(
                    id=str(randint(0, 10000)),
                    title=f"–°–µ—Ä–≤–µ—Ä {inline_query.query}",
                    description="–ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞",
                    input_message_content=telebot.types.InputTextMessageContent(ans, parse_mode="html")
                )

                bot.answer_inline_query(inline_query.id, [r1])


            except GetServerInfoError as ex:
                # print(f"INLINE EX: {ex}")
                r2 = telebot.types.InlineQueryResultArticle(
                    id=str(randint(0, 10000)),
                    title=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ",
                    description=f"{ex}",
                    input_message_content=telebot.types.InputTextMessageContent(f"{ex}")
                )
                bot.answer_inline_query(inline_query.id, [r2])
            except Exception as ex:
                print(f"EX: {ex}")

        bot.polling(none_stop=True)

if __name__ == "__main__":
    try:
        b = Bot()
        b.mainloop()
    except requests.exceptions.ConnectionError as ex:
        logging.error(f"ConnectionError: {ex}")
    except Exception as ex:
        print(f"UK ex: {ex}")
